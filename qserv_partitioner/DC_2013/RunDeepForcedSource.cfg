# =====================================================
# DC_2013 RunDeepForcedSource table configuration file
# =====================================================

# Partitioning parameters.
part = {
    # The partitioning position is the position of the associated object. : N/A
    pos = 'coord_ra, coord_decl'
    # Managing RunDeepForcedSource duplicate w.r.t. Serge remark :
    # It should be the case that duplicates have positions that are extremely close to one another.
    # So the first thing to do would be to go ahead and partition with the deep forced source position anyway.
    # To check that no duplicates where split across chunks, you’ll want to set up the partitioner such that each chunk contains exactly one sub-chunk,
    # and such that the overlap radius is non-zero but small (let’s say an arc-minute). This way, the partitioner will split input into chunks, and,
    # for each chunk, provide nearby rows (the overlap). If the two deep forced sources in a duplicate pair are assigned to different chunks,
    # then one will be in the overlap of the chunk for the other, and vice-versa.
    overlap = 0.016666666666666666
}

# Output CSV format.
out.csv = {
    null      = '\\N'
    delimiter = '\t'
    escape    = '\\'
    no-quote  = true
}

in.csv = {
    null      = '\\N'
    escape    = '\\'
    delimiter	= ','
    # List of RunDeepForcedSource table column names, in order of occurrence.
    field 	= [
    id,
    coord_ra,
    coord_decl,
    parent,
    @flags_badcentroid,
    centroid_sdss_x,
    centroid_sdss_y,
    centroid_sdss_xVar,
    centroid_sdss_xyCov,
    centroid_sdss_yVar,
    @centroid_sdss_flags,
    centroid_gaussian_x,
    centroid_gaussian_y,
    centroid_gaussian_xVar,
    centroid_gaussian_xyCov,
    centroid_gaussian_yVar,
    @centroid_gaussian_flags,
    centroid_naive_x,
    centroid_naive_y,
    centroid_naive_xVar,
    centroid_naive_xyCov,
    centroid_naive_yVar,
    @centroid_naive_flags,
    @flags_pixel_edge,
    @flags_pixel_interpolated_any,
    @flags_pixel_interpolated_center,
    @flags_pixel_saturated_any,
    @flags_pixel_saturated_center,
    @flags_pixel_cr_any,
    @flags_pixel_cr_center,
    @flags_pixel_bad,
    shape_sdss_Ixx,
    shape_sdss_Iyy,
    shape_sdss_Ixy,
    shape_sdss_IxxVar,
    shape_sdss_IxxIyyCov,
    shape_sdss_IxxIxyCov,
    shape_sdss_IyyVar,
    shape_sdss_IyyIxyCov,
    shape_sdss_IxyVar,
    @shape_sdss_flags,
    shape_sdss_centroid_x,
    shape_sdss_centroid_y,
    shape_sdss_centroid_xVar,
    shape_sdss_centroid_xyCov,
    shape_sdss_centroid_yVar,
    @shape_sdss_centroid_flags,
    @shape_sdss_flags_unweightedbad,
    @shape_sdss_flags_unweighted,
    @shape_sdss_flags_shift,
    @shape_sdss_flags_maxiter,
    flux_gaussian,
    flux_gaussian_err,
    @flux_gaussian_flags,
    flux_gaussian_psffactor,
    @flux_gaussian_flags_psffactor,
    flux_naive,
    flux_naive_err,
    @flux_naive_flags,
    flux_psf,
    flux_psf_err,
    @flux_psf_flags,
    flux_psf_psffactor,
    @flux_psf_flags_psffactor,
    flux_sinc,
    flux_sinc_err,
    @flux_sinc_flags,
    correctfluxes_apcorr,
    @correctfluxes_apcorr_flags,
    centroid_record_x,
    centroid_record_y,
    classification_extendedness,
    refFlux,
    refFlux_err,
    objectId,
    coord_raVar,
    coord_radeclCov,
    coord_declVar,
    exposure_id,
    exposure_filter_id,
    exposure_time,
    exposure_time_mid,
    cluster_id,
    cluster_coord_ra,
    cluster_coord_decl
    ]
}
